// Copyright (c) ppy Pty Ltd <contact@ppy.sh>. Licensed under the MIT Licence.
// See the LICENCE file in the repository root for full licence text.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using Newtonsoft.Json;
using osu.Framework.Bindables;
using osu.Game.Audio;
using osu.Game.Beatmaps;
using osu.Game.Beatmaps.ControlPoints;
using osu.Game.Rulesets.Judgements;
using osu.Game.Rulesets.Objects;
using osu.Game.Rulesets.Objects.Types;

namespace osu.Game.Rulesets.Catch.Objects
{
    public class JuiceStream : CatchHitObject, IHasPathWithRepeats, IHasSliderVelocity
    {
        /// <summary>
        /// Positional distance that results in a duration of one second, before any speed adjustments.
        /// </summary>
        private const float base_scoring_distance = 100;

        public override Judgement CreateJudgement() => new IgnoreJudgement();

        public int RepeatCount { get; set; }

        public BindableNumber<double> SliderVelocityMultiplierBindable { get; } = new BindableDouble(1)
        {
            Precision = 0.01,
            MinValue = 0.1,
            MaxValue = 10
        };

        public double SliderVelocityMultiplier
        {
            get => SliderVelocityMultiplierBindable.Value;
            set => SliderVelocityMultiplierBindable.Value = value;
        }

        /// <summary>
        /// An extra multiplier that affects the number of <see cref="Droplet"/>s generated by this <see cref="JuiceStream"/>.
        /// An increase in this value increases <see cref="TickDistance"/>, which reduces the number of ticks generated.
        /// </summary>
        public double TickDistanceMultiplier = 1;

        [JsonIgnore]
        private double velocityFactor;

        [JsonIgnore]
        private double tickDistanceFactor;

        [JsonIgnore]
        public double Velocity => velocityFactor * SliderVelocityMultiplier;

        [JsonIgnore]
        public double TickDistance => tickDistanceFactor * TickDistanceMultiplier;

        /// <summary>
        /// The length of one span of this <see cref="JuiceStream"/>.
        /// </summary>
        public double SpanDuration => Duration / this.SpanCount();

        /// <summary>

        /// Whether to allow juice streams with missing segments to generate new tiny droplets.
        /// </summary>
        public bool AddTinyToNewSegment { get; set; }

        /// <summary>
        /// Whether to allow juice streams with incomplete segments to generate remaining tiny droplets.
        /// </summary>
        public bool AddTinyToIncompleteSegment { get; set; }

        /// <summary>
        /// Whether to allow the removal of mistiming from every tiny droplet that is affected.
        /// </summary>
        public bool TimedTinyDroplets { get; set; }

        /// <summary>
        /// Whether LegacyLastTick prevented every tiny droplet to generate on the current segment.
        /// </summary>
        public bool LegacyLastTickCausedMissingAllTiny { get; set; }

        /// <summary>
        /// Whether LegacyLastTick caused extra tiny droplets to not generate on the current segment.
        /// </summary>
        public bool LegacyLastTickCausedMissingExtraTiny { get; set; }

        /// <summary>
        /// The amount of tiny droplets generated by LegacyLastTick on the current segment.
        /// </summary>
        public int LegacyLastTickTinyCounter { get; set; }

        /// <summary>
        /// Whether the newly generated tiny droplet should use the new random generator.
        /// </summary>
        public bool TinyUsesNewRandom { get; set; }

        /// This <see cref="JuiceStream"/> replaces <see cref="TinyDroplet"/> with <see cref="Droplet"/>.
        /// </summary>
        public bool OnlyLargeDroplets { get; set; }

        protected override void ApplyDefaultsToSelf(ControlPointInfo controlPointInfo, IBeatmapDifficultyInfo difficulty)
        {
            base.ApplyDefaultsToSelf(controlPointInfo, difficulty);

            TimingControlPoint timingPoint = controlPointInfo.TimingPointAt(StartTime);

            velocityFactor = base_scoring_distance * difficulty.SliderMultiplier / timingPoint.BeatLength;
            tickDistanceFactor = base_scoring_distance * difficulty.SliderMultiplier / difficulty.SliderTickRate;
        }

        protected override void CreateNestedHitObjects(CancellationToken cancellationToken)
        {
            base.CreateNestedHitObjects(cancellationToken);

            var dropletSamples = Samples.Select(s => s.With(@"slidertick")).ToList();

            int nodeIndex = 0;
            SliderEventDescriptor? lastEvent = null;

            foreach (var e in SliderEventGenerator.Generate(StartTime, SpanDuration, Velocity, TickDistance, Path.Distance, this.SpanCount(), cancellationToken))
            {
                // generate tiny droplets since the last point
                if (lastEvent != null)
                {
                    double sinceLastTick = (int)e.Time - (int)lastEvent.Value.Time;

                    // Workaround for BUG (References the same one described in CatchBeatmapProcessor)
                    // "Todo: BUG!! Stable used the last control point as the final position of the path, but it should use the computed path instead."
                    //
                    if (e.Type is SliderEventType.LegacyLastTick)
                    {
                        double sinceLastTickAsLegacy = sinceLastTick;

                        //No tiny droplets could be generated in osu!stable, leaving JuiceStream paths empty.
                        if (sinceLastTickAsLegacy <= 100)
                        {
                            if (AddTinyToNewSegment)
                            {
                                LegacyLastTickCausedMissingAllTiny = true;

                                //Silently removes mistiming from the missing tiny droplets (Required to add the new tiny droplets).
                                continue;
                            }
                        }
                        //Tiny droplets could be generated in osu!stable in a potentially different amount than expected.
                        else
                        {
                            int tinyTickCountLegacyLastTick = 1;
                            int tinyTickCountTrueEndTime = 1;
                            double sinceLastTickAsTrueEndTime = (int)this.GetEndTime() - (int)lastEvent.Value.Time;
                            double slicedLegacyLastTick = sinceLastTickAsLegacy;
                            double slicedEndTime = sinceLastTickAsTrueEndTime;

                            while (slicedLegacyLastTick > 100)
                            {
                                slicedLegacyLastTick /= 2;
                                tinyTickCountLegacyLastTick *= 2;
                            }

                            while (slicedEndTime > 100)
                            {
                                slicedEndTime /= 2;
                                tinyTickCountTrueEndTime *= 2;
                            }

                            tinyTickCountLegacyLastTick -= 1;
                            tinyTickCountTrueEndTime -= 1;

                            //Check if there are missing extra tiny droplets compared to osu!stable
                            if (tinyTickCountTrueEndTime > tinyTickCountLegacyLastTick)
                            {
                                if (AddTinyToIncompleteSegment)
                                {
                                    LegacyLastTickCausedMissingExtraTiny = true;
                                    LegacyLastTickTinyCounter = tinyTickCountLegacyLastTick;

                                    //Silently removes mistiming from the incomplete juice streams (Required to add the new tiny droplets).
                                    continue;
                                }
                            }

                            //Remove mistiming from regular tiny droplets.
                            if (TimedTinyDroplets)
                                continue;
                        }
                    }

                    if (sinceLastTick > 80)
                    {
                        double timeBetweenTiny = sinceLastTick;

                        while (timeBetweenTiny > 100)
                            timeBetweenTiny /= 2;

                        for (double t = timeBetweenTiny; t < sinceLastTick; t += timeBetweenTiny)
                        {
                            cancellationToken.ThrowIfCancellationRequested();


                            //The new random generator is only applied to the new osu!lazer tiny droplets, due to the linear nature of the RNG used for offset randomization.
                            if (LegacyLastTickCausedMissingAllTiny || (LegacyLastTickCausedMissingExtraTiny && LegacyLastTickTinyCounter-- < 1))
                                TinyUsesNewRandom = true;

                            AddNested(new TinyDroplet
                            {
                                StartTime = t + lastEvent.Value.Time,
                                X = EffectiveX + Path.PositionAt(lastEvent.Value.PathProgress + (t / sinceLastTick) * (e.PathProgress - lastEvent.Value.PathProgress)).X,
                                IsUsingOldRandom = !TinyUsesNewRandom
                            });

                            if (OnlyLargeDroplets)
                                AddNested(new Droplet
                                {
                                    HasRandomOffset = true,
                                    StartTime = t + lastEvent.Value.Time,
                                    X = EffectiveX + Path.PositionAt(lastEvent.Value.PathProgress + (t / sinceLastTick) * (e.PathProgress - lastEvent.Value.PathProgress)).X,
                                });
                            else
                                AddNested(new TinyDroplet
                                {
                                    StartTime = t + lastEvent.Value.Time,
                                    X = EffectiveX + Path.PositionAt(lastEvent.Value.PathProgress + (t / sinceLastTick) * (e.PathProgress - lastEvent.Value.PathProgress)).X,
                                });
                        }
                    }
                }

                // this also includes LastTick and this is used for TinyDroplet generation above.
                // this means that the final segment of TinyDroplets are increasingly mistimed where LastTick is being applied.
                lastEvent = e;

                switch (e.Type)
                {
                    case SliderEventType.Tick:
                        AddNested(new Droplet
                        {
                            Samples = dropletSamples,
                            StartTime = e.Time,
                            X = EffectiveX + Path.PositionAt(e.PathProgress).X,
                        });
                        break;

                    case SliderEventType.Head:
                    case SliderEventType.Tail:
                    case SliderEventType.Repeat:
                        AddNested(new Fruit
                        {
                            Samples = this.GetNodeSamples(nodeIndex++),
                            StartTime = e.Time,
                            X = EffectiveX + Path.PositionAt(e.PathProgress).X,
                        });
                        break;
                }
            }
        }

        public float EndX => EffectiveX + this.CurvePositionAt(1).X;

        [JsonIgnore]
        public double Duration
        {
            get => this.SpanCount() * Path.Distance / Velocity;
            set => throw new NotSupportedException($"Adjust via {nameof(RepeatCount)} instead"); // can be implemented if/when needed.
        }

        public double EndTime => StartTime + Duration;

        private readonly SliderPath path = new SliderPath();

        public SliderPath Path
        {
            get => path;
            set
            {
                path.ControlPoints.Clear();
                path.ControlPoints.AddRange(value.ControlPoints.Select(c => new PathControlPoint(c.Position, c.Type)));
                path.ExpectedDistance.Value = value.ExpectedDistance.Value;
            }
        }

        public double Distance => Path.Distance;

        public IList<IList<HitSampleInfo>> NodeSamples { get; set; } = new List<IList<HitSampleInfo>>();
    }
}
